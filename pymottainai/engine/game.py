from .exc import SetupError
from .player import Player
from .deck import Deck
from .env import HAND_SIZE


class Game(object):
    def __init__(self, players=None, player_count=None, deck=None):
        '''players is a list of Player objects for this Game.
        If provided with a player_count a check is done to ensure the length
        of players matches player_count.

        If only player_count is provided, then the Game.players list will be
        autogenerated with that number of players.
        '''
        self.turn_count = 0
        self.current_player = None
        self._start_player = None
        self.deck = deck or Deck()
        self.floor = list()

        player_choices = [2, 3]

        if player_count is None and players is None:
            raise SetupError('You must provide a player_count or '
                             'a list of players')

        if player_count not in player_choices and \
           len(players) not in player_choices:
            raise SetupError('The game only allows 2 or 3 players: '
                             'player_count({}), players({})'.format(player_count,
                                                                    len(players)))

        if players is not None and player_count is not None:
            if len(players) != player_count:
                raise RuntimeError('player_count does not match '
                                   'the number of players provided')

        self.players = players or list()
        if players is None:
            for i in range(player_count):
                self.players.append(Player(name="player-{}".format(i)))

    def deal(self):
        for i in range(HAND_SIZE):
            for player in self.players:
                card = self.deck.draw()
                card.owner = player
                player.hand.cards.append(self.deck.draw())
        return [p.hand for p in self.players]

    @property
    def start_player(self):
        if self._start_player is not None:
            return self._start_player

        if self.floor is None or len(self.floor) == 0:
            return None
        sorted_floor = sorted(self.floor, key=lambda card: card.name)
        self._start_player = sorted_floor[0].owner
        return self._start_player
